plugins {
    id 'localJavaPlugin'
    id 'localJSweetPlugin'
    id 'localFxPlugin'
}


dependencies {
    ntroDependancies.split(',').each {
        implementation "ca.ntro:ntro_${it}:${ntroVersion}"
    }
}

eclipse {
    classpath {
        file {
            whenMerged {
                classpath ->

                    def toRemove = []
                    def toAdd = []

                    entries.each {

                        if(ntroDependancies.split(',').any{dependancy -> it.path.contains("ntro_"+dependancy)}){
                            toRemove += it
                            toAdd += new org.gradle.plugins.ide.eclipse.model.Library(fileReference(file(it.publication.path)))
                        }
                    }

                    entries.removeAll toRemove
                    entries.addAll toAdd
            }
        }
    }
}

def commonConfig = {
   classpath = sourceSets.main.runtimeClasspath
   standardInput = System.in
   jvmArgs('-Dfile.encoding=UTF-8')
}

def clientConfig = {
   configure commonConfig
   main = clientMainClass
   jvmArgs('-Dsun.java2d.opengl=true')
}

def serverConfig = {
    configure commonConfig
    main = serverMainClass
}

def localConfig = {
    configure commonConfig
    main = localMainClass
    jvmArgs('-Dsun.java2d.opengl=true')
}

task(local, dependsOn: 'classes', type: JavaExec) {
     configure localConfig
     jvmArgs('-Duser.language=fr')
}
task(localEn, dependsOn: 'classes', type: JavaExec) {
     configure localConfig
     jvmArgs('-Duser.language=en')
}

task(client, dependsOn: 'classes', type: JavaExec) {
   configure clientConfig
   jvmArgs('-Duser.language=fr')
}

task(clientFr, dependsOn: 'classes', type: JavaExec) {
   configure clientConfig
   jvmArgs('-Duser.language=fr')
}

task(clientEn, dependsOn: 'classes', type: JavaExec) {
   configure clientConfig
   jvmArgs('-Duser.language=en')
}

task(serveur, dependsOn: 'classes', type: JavaExec){
    configure serverConfig
}

task(rapidite, dependsOn: 'classes', type: JavaExec) {
   configure clientConfig
   args("Touche specialite rapidite","GAUCHE")
}

task(efficacite, dependsOn: 'classes', type: JavaExec) {
   configure clientConfig
   args("Touche specialite efficacite", "DROITE")
}

task(precision, dependsOn: 'classes', type: JavaExec) {
   configure clientConfig
   args("Touche specialite precision","AUCUN")
}
